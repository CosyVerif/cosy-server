#! /usr/bin/env bash

set -e
set -o pipefail

for i in "$@"
do
  case ${i} in
    -p=*|--prefix=*)
      cosy_prefix="${i#*=}"
      cosy_prefix="${cosy_prefix%/}"
    ;;
    -t=*|--temp=*)
      cosy_temp="${i#*=}"
      cosy_temp="${cosy_temp%/}"
    ;;
    -m|--minimal)
      minimal=true
    ;;
    -i|--in-ci)
      in_ci=true
    ;;
    *)
      echo "Usage: "
      echo "  install [--prefix=PREFIX] [--temp=TEMP_DIR] [--minimal] [--in-ci]"
      exit 1;
    ;;
  esac
done

# Useful variables:
currentwd=$(dirname "${BASH_SOURCE[0]}")
currentwd=$(dirname "${currentwd}")
cosy_temp=${cosy_temp:-$(mktemp -d 2>/dev/null || mktemp -d -t cosy)}
cosy_log="${cosy_temp}/install.log"
cosy_prefix=${cosy_prefix:-${cosy_temp}}
parallel=$(nproc 2> /dev/null || sysctl -n hw.ncpu 2> /dev/null)

export PATH="${PATH}:/sbin"

function finish
{
  if [ ! -z "${in_ci+x}" ]; then
    cat "${cosy_log}"
  fi
}
trap finish EXIT

# Test if sudo is required:
{
  if [ -d "${cosy_prefix}" ]; then
    write_test=${cosy_prefix}
  else
    write_test=$(dirname "${cosy_prefix}")
  fi
  if [ ! -w "${write_test}" ]; then
    export sudo="sudo"
  fi
}

${sudo} mkdir -p "${cosy_temp}"
${sudo} mkdir -p "${cosy_prefix}"
${sudo} mkdir -p "${cosy_prefix}/bin"

if [ ! -z "${in_ci+x}" ]; then
  export red=''
  export green=''
  export nc=''
else
  export red='\033[0;31m'
  export green='\033[0;32m'
  export nc='\033[0m'
fi

function error ()
{
  echo -e "${red}An error happened.${nc}"
  echo -e "Please read log file: ${red}${cosy_log}${nc}."
  if [ ! -z "${in_ci+x}" ]; then
    cat "${cosy_log}"
  fi
  exit 1
}
trap error ERR

# Detect if environment needs rebuild:
if command -v git >> "${cosy_log}" 2>&1; then
  ${sudo} mkdir -p "${cosy_prefix}/share/cosy/"
  if [ -f "${cosy_prefix}/share/cosy/environment.version" ]; then
    version=$(cat "${cosy_prefix}/share/cosy/environment.version")
    if git diff --name-only "${version}" | grep --quiet "bin/install" ; then
      echo -e "Environment is installed at version ${green}${version}${nc} and needs rebuild."
    else
      echo -e "Environment is already installed at version ${green}${version}${nc}."
      exit 0
    fi
  else
    echo -e "Environment is ${green}not installed${nc}."
  fi
fi

{ # Detect if apt-get or brew is available:
  if command -v apt-get; then
    if apt-get update; then
      apt_available=true
      apt_get="apt-get"
    elif sudo apt-get update; then
      apt_available=true
      apt_get="sudo apt-get"
    fi
  fi >> "${cosy_log}" 2>&1
  if command -v brew; then
    brew_available=true
  fi >> "${cosy_log}" 2>&1
}

{
  echo -n "Initializing git submodules... "
  (
    cd "${currentwd}" || exit 1
    git submodule init
    git submodule update
  ) >> "${cosy_log}" 2>&1 \
  && echo -e "${green}success${nc}" \
  || echo -e "${red}failure${nc}"
}

# Install realpath:
{
  echo -n "Installing sh-realpath... "
  ( ${sudo} cp "${currentwd}/dependencies/sh-realpath/realpath.sh" "${cosy_prefix}/bin/"
    ${sudo} chmod a+x "${cosy_prefix}/bin/realpath.sh"
  ) >> "${cosy_log}" 2>&1 \
    && echo -e "${green}success${nc}" \
    || echo -e "${red}failure${nc}"
}

# Fix prefix to always be an absolute path:
# shellcheck disable=SC1091 disable=SC1090
. "${cosy_prefix}/bin/realpath.sh"
cosy_prefix=$(realpath "${cosy_prefix}")
cosy_temp=$(realpath "${cosy_temp}")

# Install dependencies:
{
  echo -n "Installing development packages... "
  if [ -z "${apt_available}" ] && [ -z "${brew_available}" ]; then
    echo -e "${green}skipped${nc}"
  else
    case "$(uname -s)" in
      "Linux")
        ${apt_get} update  --yes
        ${apt_get} install --yes make clang gcc diffutils patch curl zip unzip \
                                 perl build-essential wget python python-pip \
                                 libc6-dev libssl-dev \
                                 libreadline-dev libncurses5-dev libpcre3-dev \
                                 npm libc-bin redis-server postgresql shellcheck bats
        ;;
      "Darwin")
        HOMEBREW_PREFIX=$(brew config | grep "HOMEBREW_PREFIX" | tr -d ' \t' | cut -d ":" -f 2)
        export CPATH="${HOMEBREW_PREFIX}/include:${CPATH}"
        export LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${LIBRARY_PATH}"
        export LD_LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${LD_LIBRARY_PATH}"
        export DYLD_LIBRARY_PATH="${HOMEBREW_PREFIX}/lib:${DYLD_LIBRARY_PATH}"
        brew update
        brew install openssl pcre python wget npm libcaca postgresql redis shellcheck bats
        brew link --force openssl
        ;;
      *)
        echo -e "Error: unknown OS: ${red}$(uname -s)${nc}."
        exit 1
        ;;
    esac >> "${cosy_log}" 2>&1 \
         && echo -e "${green}success${nc}" \
         || echo -e "${red}failure${nc}"
  fi
  export CPATH="${cosy_prefix}/include:${CPATH}"
  export LIBRARY_PATH="${cosy_prefix}/lib:${LIBRARY_PATH}"
  export LD_LIBRARY_PATH="${cosy_prefix}/lib:${LD_LIBRARY_PATH}"
}

# Install lua, luarocks and packages:
{
  export CC=clang
  echo -n "Installing luajit and luarocks... "
  if pip list | grep "hererocks" >> "${cosy_log}" 2>&1; then
    hererocks="hererocks"
  else
    ${sudo} pip install --root="${cosy_prefix}" hererocks
    path=$(find "${cosy_prefix}" -name "hererocks.py")
    export PYTHONPATH
    PYTHONPATH=$(dirname "${path}"):"${PYTHONPATH}"
    hererocks="${cosy_prefix}/usr/local/bin/hererocks"
  fi >> "${cosy_log}" 2>&1
  ${sudo} "${hererocks}" "${cosy_prefix}" -r^ --luajit=2.1 --compat=5.2 \
    >> "${cosy_log}" 2>&1 \
    && echo -e "${green}success${nc}" \
    || echo -e "${red}failure${nc}"
  echo -n "Installing development rocks... "
  # shellcheck disable=SC2086
  ${sudo} "${cosy_prefix}/bin/luarocks" make rockspec/cosy-server-env-master-1.rockspec \
    >> "${cosy_log}" 2>&1 \
   && echo -e "${green}success${nc}" \
   || echo -e "${red}failure${nc}"
  echo -n "Installing runtime rocks... "
  ${sudo} "${cosy_prefix}/bin/luarocks" make rockspec/cosy-server-master-1.rockspec \
    >> "${cosy_log}" 2>&1 \
    && echo -e "${green}success${nc}" \
    || echo -e "${red}failure${nc}"
  echo -n "Installing lua-cjson-ol rock... "
  ${sudo} "${cosy_prefix}/bin/luarocks" install lua-cjson-ol \
    >> "${cosy_log}" 2>&1 \
    && echo -e "${green}success${nc}" \
    || echo -e "${red}failure${nc}"
}

# Install web dependencies:
# (
#   cd "${currentwd}" || exit 1
#   web_dependencies=(
#     auth0-lock
#     bootbox
#     bootstrap3
#     d3
#     es6-promise
#     fetch-ie8
#     font-awesome
#     jquery
#     jquery-locationpicker
#     sjcl
#   )
#   echo "Installing web dependencies... "
#   for dependency in ${web_dependencies[*]}; do
#     echo -n "  Installing ${dependency}... "
#     npm install "${dependency}" >> "${cosy_log}" 2>&1 \
#       && echo -e "${green}success${nc}" \
#       || echo -e "${red}failure${nc}"
#   done
#   mv node_modules/fetch-ie8 node_modules/fetch
#   ${sudo} mkdir -p "${cosy_prefix}/share/cosy/www"
#   ${sudo} mkdir -p "${cosy_prefix}/share/cosy/www/js"
#   ${sudo} mkdir -p "${cosy_prefix}/share/cosy/www/css"
#   ${sudo} mkdir -p "${cosy_prefix}/share/cosy/www/fonts"
#   for module in node_modules/*; do
#     name=$(basename "${module}")
#     ${sudo} cp "${module}/dist/"*.js    "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
#     ${sudo} cp "${module}/dist/"*.map   "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
#     ${sudo} cp "${module}/dist/js/"*    "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
#     ${sudo} cp "${module}/dist/css/"*   "${cosy_prefix}/share/cosy/www/css/"   2> /dev/null || true
#     ${sudo} cp "${module}/dist/fonts/"* "${cosy_prefix}/share/cosy/www/fonts/" 2> /dev/null || true
#     ${sudo} cp "${module}/js/"*         "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
#     ${sudo} cp "${module}/css/"*        "${cosy_prefix}/share/cosy/www/css/"   2> /dev/null || true
#     ${sudo} cp "${module}/fonts/"*      "${cosy_prefix}/share/cosy/www/fonts/" 2> /dev/null || true
#     ${sudo} cp "${module}/${name}"*.js  "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
#     ${sudo} cp "${module}/${name}"*.map "${cosy_prefix}/share/cosy/www/js/"    2> /dev/null || true
#     ${sudo} cp "${module}/${name}"*.css "${cosy_prefix}/share/cosy/www/css/"   2> /dev/null || true
#   done
#   ${sudo} rm -rf node_modules
#   ${sudo} cp "dependencies/lua.vm.js/dist/lua.vm.js" "${cosy_prefix}/share/cosy/www/js/"
# )

if [ ! -z "${minimal+x}" ]; then
  echo -e "Skipping openresty and web dependencies as minimal install is set."
  exit 0
fi

# Install openresty:
echo -n "Installing openresty... "
(
  cd "${currentwd}/dependencies/ngx_openresty" || exit 1
  make
  for dir in openresty-*; do
    if [ -d "${dir}" ]; then
      cd "${dir}" || exit 1
      ./configure --prefix="${cosy_prefix}" \
                  --without-lua51 \
                  --with-luajit="${cosy_prefix}" \
                  --with-ipv6 \
                  --with-pcre-jit \
                  -j"${parallel}"
      make -j"${parallel}"
      ${sudo} make install
      make clean
      break
    fi
  done
) >> "${cosy_log}" 2>&1 \
  && echo -e "${green}success${nc}" \
  || echo -e "${red}failure${nc}"

(
  cd "${currentwd}" || exit 1
  git rev-parse --verify HEAD > "${cosy_temp}/environment.version"
  ${sudo} mv "${cosy_temp}/environment.version" "${cosy_prefix}/share/cosy/environment.version"
)

if [ ! -z "${in_ci+x}" ]; then
  cat "${cosy_log}"
fi
