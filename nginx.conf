worker_processes ${{NUM_WORKERS}};
error_log stderr notice;
daemon off;
pid logs/nginx.pid;

env WERCKER_GIT_BRANCH; # wercker specific
env RESOLVERS;
env REDIS_PORT;
env POSTGRES_PORT;
env POSTGRES_USER;
env POSTGRES_PASSWORD;
env POSTGRES_DATABASE;
env COSY_HOST;
env COSY_BRANCH;
env POSTGRES_HOST;
env POSTGRES_USER;
env POSTGRES_PASSWORD;
env POSTGRES_DATABASE;
env AUTH0_DOMAIN;
env AUTH0_ID;
env AUTH0_SECRET;
env AUTH0_TOKEN;
env DOCKER_USER;
env DOCKER_SECRET;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  resolver ${{RESOLVERS}};

  init_worker_by_lua_block {
    local Config = require "lapis.config".get ()
    local Worker = require "resty.qless.worker"
    local worker = Worker.new {
      host = Config.redis.host,
      port = Config.redis.port,
      connect_timeout    = Config.redis.timeout,
      read_timeout       = Config.redis.timeout,
      keepalive_timeout  = nil,
      keepalive_poolsize = nil,
    }
    worker:start {
      interval    = 1,
      concurrency = 4,
      reserver    = "shuffled round-robin",
      queues      = { "editors", "executions", },
    }
  }

  server {
    server_name       "${{HOSTNAME}}";
    listen            "${{PORT}}";
    lua_code_cache    "${{CODE_CACHE}}";
    default_type      "application/json";
    keepalive_timeout 60;

    error_page 497 =200 $request_uri;
    error_page 404 = @empty;

    location @empty {
      return 404 "{}";
    }

    location / {
      default_type  "application/json";
      add_header    "Access-Control-Allow-Origin"      "*";
      add_header    "Access-Control-Allow-Credentials" true;
      add_header    "Access-Control-Allow-Methods"     "DELETE, HEAD, GET, OPTIONS, POST, PUT";
      add_header    "Access-Control-Max-Age"           1728000;
      content_by_lua_block {
        require "resty.core"
        require "lapis".serve "cosy.server"
      }
    }

    location /lua {
      root          /;
      default_type  application/lua;
      set           $target   "";
      access_by_lua_block {
        local name     = ngx.var.uri:match "/lua/(.*)"
        local filename = package.searchpath (name, package.path)
        if filename then
          ngx.var.target = filename
        else
          return ngx.exit (404)
        end
      }
      try_files $target =404;
    }

  }

}
